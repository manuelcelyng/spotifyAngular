Sitios hechos con Angular ->   https://www.madewithangular.com/sites

Iconos incoscout -> https://iconscout.com/unicons

Configurar en el archivo tsconfig.json para poder importar json dentro de los componentes ->  "resolveJsonModule": true

Brand Color : Establecer las variables de diseño. Colores, Fuentes, Bordes, Etc. -> Se implemente en el styles.css PRINCIPAL

Scaffolding (Andamio): Estructura de carpetas para facilitar la mantenibilidad y la escalabilidad. 
		- Auth
		- Home
		- Tracks
		- History
		- Favorites

MODULES  (ng generate module ./modules): la carpeta modules, va a contener cada uno de los modulos que nosotros vamos a usar POR EJEMPLO:
	- modulo Auth, puede contener:
		- routes	
		- components
		- services
		- pipes	

MODULOS y RUTAS -> video 14 , se explica un poco la estructura de un modulo, y la principal idea para trabajar los componentes. y se configura una ruta y un componente (ng generate component)

video 15 : Mòdulo compartido - shared.module (ng g m shared/Shared)


-----······· SECCIÓN 4 ·······-------
Video 16 : LazyLoading -> carga perezosa : ROUTES y optimización de tu app: Basicamente este termino indic que gestione sus modulos para cuando el usuario lo deba usar, y no todos al mismo tiempo en todo momento.
- ya aqui se creo un componente y se hizo la ruta
- Se genero un componente compartido y se enruto con lazyloading 
- se crea un componente de pagina (ng g c modules/home/pages/HomePage)

video 17 : Path -> estableces alias a rutas de estructura -@core , -@modules en el archivo tsconfig.json

video 18 : pages -> componente que està relacionado directamente con una ruta -> el logingPage 

video 19: -> Se explica un poco el funcionamiento del router-outlet -> [ IMPORTANTE ]

video 20: ng-template - ng-container -> permite ser más ordenado al momento de escribir el código , tambièn ngcontainer no aparece en la secciòn de inspeccionar , lo que hace que no se cargue lo que no sea necesario y no permita ver que hay allì. [Un contenedor va asociado a un template]

video 21: Comunicación entre componentes : Se explican los @input en un componente y como usarlo desde otro componente, también se muestra el pipe json para saber el contenido de un objeto que se pasa por un input -> ejemplo : {{objeto | json}}

video 22: Modelos InterfaceS -> se crean los modelos de los datos que se usan en el tracks.json
		-> iMPORTANTE ver concepto de desestructuraciòn de javaScript  ->   const {data}:any = (dataRaw as any).default
		-> Se configura todo el tema de componente generico , y los card-player-component , los cuales se usan en el modulo tracks, en su componente tracks, el cual es el padre.

video 23: Contexto (ng-template) -> se termina de estructurar un poco màs las paginas y las rutas. En la pagina favoritos tambien se conforma por dos componentes y esta se configura aquí.

video 24: Rutas-> se muestran dos formas de colocar las rutas para viajar entre paginas , directiva [routerLink], Y router navigator

video 25: Pipe (Filtros) -> se hace un ejemplo de un pipe, el cual se usa en el componente play-list-body para ordenar ascendente o descendente por unos parámetros

video 26: Directivas (Manejar elementos del DOM) -> Se crea una directiva para manejar el elemento img de HTML, para manejar una imagen por defecto en caso de que no se cargue la imagen correcta del componente. Esta directiva recibe como input, la url del recurso a usar (Una imagen por defecto) y tiene  un HostListener, para escuchar errores de parte del componente img, en caso de haber un error , este lo captura y utiliza la url pasada para colocar la imagen y así no dejar que se vea sin fondo el card.

video 27: Formulario login - Formularios reactivos: En este video, el objetivo fue comunicar el card player que se tiene en el panel, y comunicarlo con el media player, para esto la idea es que al presionar el botón de play, la canción sea enviada al media player para que lo reproduzca. Esto se hizo usando programación reactiva, para comunicar los componentes, por lo que se ven los conceptos de EventEmitter, subscribe and unsubscribe , emit , onDestroy. para cumplir con el flujo 


video 28: Servicios -> se crean servicios dentro del modulo Tracks y este se usa allí y en el side bar, se muestra mediante programación reactiva como crear un observer y subscribirse a el y además indtroducirle un dato nuevo que aparece luego de 4 segundos, en este se uso Observer,of()  y el conecpto next que tiene un objeto tipo observer.
Concepto de Form group y Form control -> variables que se deben definir en la clase del componente -> formLogin : FormGroup =  new FormGroup({});
video 29. Se sigue el ejercicio complementando al video 28 

----//////#### SECCION 7 : HTTPClient, API y mÁS   ######////////////// ------------

video 30. API Node(Demo)  - Angular HTTP CLIENT -> Se baja una api que contiene los tracks,  y se usara en la demo, se configura y se modifica el servicio de tracks para traer la info de la api con http client de la librería @angular/common/http

video 31: HTTP Conexión -> Se configura el servicio con el httpclient nuevamente y ahora se explica el uso de PIPE (Filtro) PERO este filtro no es el de angular, este filtro es el que se le puede aplicar a las subscripciones y hacen parte de la programación reactiva, se explica el uso de estos pipes y como nos ayudan , además de que se hace un ejemplo donde se usa una promesa para usarla dentro de un pipe en la petición http.

Video 32: Se modifica el tracks-page-component.ts para mostrar lo siguiente: el observable también se puede funcionar como una promesa, puese llamarse usando el método async con await en modo topromise. 
Para manejar errores se muestra el uso de catchError e RxJS, para usarlo preferiblemente en el pipe de la petición y no en el subscriibe del observable.
Se explica el manejo del catch error , y su importancia.

----//////#### SECCION 8 : Proteger rutas con sesión de usuario.  ######////////////// ------------

Video 33: Post Login y Cookie: Se implementa en el auth.services.ts el uso de un post para enviar las credenciales de usuario.
además se configuro y mostro el ejemplod de uso del token de sesion, tanto del lado del servicio como del lado del componente.
 
Video 34: Guards - Vigilantes de las rutas -> ng generate guard ruta/nombre_guard  : Se le coloco un guardian a la ruta principal del homecomponent, estos guardianes
se pueden usar para permitir el acceso a la ruta, en el ejemplo se validaba el usode token de sesion para permitir el paso, además de redirigir a otra ruta en caso de no tener el token

Video 35:  Interceptores -> Inyectar propiedades directamente en las peticiones  , comando para generar un inyector: ng generate interceptor core/interceptors/InjectSession
Se muestra un ejemplo de agregar un header con autorizathion token , pero si esto se hace manual por cada peticion que existe todo se vuelve un bololo, por ende nace
la necesidad de usar inyectores, para manejarlo. En pocas palabras, toma un request y me permite meterle más info adicional, sin necesidad de escribir el codigo en el lugar del llamado


----//////#### SECCION 9 : BUSCADOR, async Y MÁS DE RXJS.  ######////////////// ------------

Vido 36 : Buscador Input -> Como capturar los eventos de la tecla y y como hacer una peticion hacia el backend, para evitar comportamientos que afecten
el performance o comportamiento de la  aplicacion.
	- Se crean en el modulo de History la carpeta components con el componente de busqueda "search"
	- Se crea el servicio para hacer la peticion get 
	- Desde el componente history-page, se hace uso del componente search y del play-list-body
	- el componente hijo "search" retorna al padre "history-page" la información que tiene que buscar
	a traves de @output 
		- history-page usa el servicio y con la información del hijo, hace la peticion de la busqueda|
		- luego toma un array con el resultado y se lo inyecta a play-list-body

Video 37 : Pipe ASYNC  (Se quiere resolver el problema de generación de muchas peticiones de la implementación anterior)
	- Se muestra el uso de pipe async en la etiqueta html de un componente, para indicar que alli angular se encarge de manejar la desubscripcion a un observable
	con el fin de que la peticion solo sea tomada en cuanta la ultima vez que se lanza el evento, y no se genere una cola de peticiones en la aplicacion 

Video 38 : RxJS observable : se explica haciendo comunicacion entre el servicio multimedia.service y el componente media-player-component
		Se explica el concepto del observable, observer y sus estados de netx, complete, error, y como fluye.

Video 39 : RxJs Subject y BehaviorSubjecT : 
	- Subject -> es un objeto que es observable y observer al mismo tiempo , lo que le permite llamar el método next directamente.
	- BehaviorSubject -> es un objeto igualmente observable y observer al mismo tiempo pero que se debe inicializar

	-Ambbos observables funcionan igual, cambian sus comportamientos en términos de ciclos de vida -----> Estudiar la programación reactiva !!!!! 

---------//////###### SECCION 10:  REPRODUCTOR DE AUDIO #######\\\\\\\\\\\\ -----------------------------

Video 40: Dale play a tu reproductor : Se trabaja en el componente media-player-component , se usa el multimedia service de manera publica, para darle dinamismo a la app desde el HTML y no desde el typescript.
	- En el servicio de multimedia.service se usa public audio!:HTMLAudioElement;  el cual se le inyecta  el src, de donde va a traer la canción y este es un elemento tipo audio :D
	- en multimedia.service también se crea el BehaviorSubject -> public trackInfo$: BehaviorSubject<any> = new BehaviorSubject(undefined) -> Ahí mismo en el constructor nos subscribimos para escuchar el track que llega y lograr pasar el url del track al audio element.

Video 41: Obtener tiempo transcurrido y restante de la canción : 
	- Ver documentación de HTML de las etiquetas audio/video -> Aquí vamos a escuchar eventos.
	- En el archivo multimedia.service se hizo la lógica para el tema del tiempo actual y el faltante en la vista del htlm en el media-player-component


Video 42 Pause y Play : Se trabaja en los eventos de la etiqueta audio para capturar eventos de pausa y play, para asi cambiar en la vista el icono dependiendo del estado, además de pausar y continuar la canción.

Video 43: Mostrar Progreso del Reproductor : Se realiza el calculo para mostrar el progreso del reproductor, haciendo el calculo con el tiempo de duracion de la cancion, el tiempo actual y modificando el estilo with del componente HTML que contiene el diseño del progress bar

Video 44: Navegar mediante la barra de progreso :  Se agrega la funcionalidad, en el multimedia.service  y el media-player.component para que al dar click sobre el progressBar , se pueda aumentar le tiempo de la cancion en donde demos click



---------//////###### SECCION 11:  TESTING #######\\\\\\\\\\\\ -----------------------------

Video 45 : Iniciando Testing: Se arreglan los modulos de los testing para poder iniciar a crear las pruebas unitarias.

Video 46: Componentes - Test: Se realizan los test a nivel de componente, en este caso al componente "login-page-component" al elemento Formulario

Video 47: Servicio - Test: Se realizan los test a nivel del servicio Auth.service usndo el HttpClientTestingModule para evaluar una petición Post de el metodo sendCredentiald

Video 48: Pipe - Test: Se realizan los test a nivel de un Pipe - en este caso fue el "order-list.pipe" validando que el filtro realizado si resulte con lo esperado

Video 49: Reporte de cobertura - Test: Se explica como obtener el report de cobertura, sus porcentajes de testing etc. -> ng test y habilitar el codeCoverag en el angular.json

Video 50: Directiva - Test: Se hace un test a la directiva del ImageBroken -> importante conocer la creación de un componente el cual use la directiva en el testing propiamente -> Ver archivo "img-broken.directive.spec.ts"  Para estudiar el test :D

Hasta Aquí se finaliza la realización de la App Spotify CLON :D  a continuación siguen secciones 12 - 13  y 14 para complementar.
