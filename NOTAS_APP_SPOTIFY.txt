Sitios hechos con Angular ->   https://www.madewithangular.com/sites

Iconos incoscout -> https://iconscout.com/unicons

Configurar en el archivo tsconfig.json para poder importar json dentro de los componentes ->  "resolveJsonModule": true

Brand Color : Establecer las variables de diseño. Colores, Fuentes, Bordes, Etc. -> Se implemente en el styles.css PRINCIPAL

Scaffolding (Andamio): Estructura de carpetas para facilitar la mantenibilidad y la escalabilidad. 
		- Auth
		- Home
		- Tracks
		- History
		- Favorites

MODULES  (ng generate module ./modules): la carpeta modules, va a contener cada uno de los modulos que nosotros vamos a usar POR EJEMPLO:
	- modulo Auth, puede contener:
		- routes	
		- components
		- services
		- pipes	

MODULOS y RUTAS -> video 14 , se explica un poco la estructura de un modulo, y la principal idea para trabajar los componentes. y se configura una ruta y un componente (ng generate component)

video 15 : Mòdulo compartido - shared.module (ng g m shared/Shared)


-----······· SECCIÓN 4 ·······-------
Video 16 : LazyLoading -> carga perezosa : ROUTES y optimización de tu app: Basicamente este termino indic que gestione sus modulos para cuando el usuario lo deba usar, y no todos al mismo tiempo en todo momento.
- ya aqui se creo un componente y se hizo la ruta
- Se genero un componente compartido y se enruto con lazyloading 
- se crea un componente de pagina (ng g c modules/home/pages/HomePage)

video 17 : Path -> estableces alias a rutas de estructura -@core , -@modules

video 18 : pages -> componente que està relacionado directamente con una ruta

video 19: 

video 20: ng-template - ng-container -> permite ser más ordenado al momento de escribir el código , tambièn ngcontainer no aparece en la secciòn de inspeccionar , lo que hace que no se cargue lo que no sea necesario y no permita ver que hay allì. [Un contenedor va asociado a un template]

video 21: Comunicación entre componentes : Se explican los @input en un componente y como usarlo desde otro componente, también se muestra el pipe json para saber el contenido de un objeto que se pasa por un input -> ejemplo : {{objeto | json}}

video 22: Modelos InterfaceS -> se crean los modelos de los datos que se usan en el tracks.json
		-> iMPORTANTE ver concepto de desestructuraciòn de javaScript  ->   const {data}:any = (dataRaw as any).default
		-> Se configura todo el tema de componente generico , y los card-player-component , los cuales se usan en el modulo tracks, en su componente tracks, el cual es el padre.

video 23: Contexto (ng-template) -> se termina de estructurar un poco màs las paginas y las rutas. En la pagina favoritos tambien se conforma por dos componentes y esta se configura aquí.

video 24: Rutas-> se muestran dos formas de colocar las rutas para viajar entre paginas , directiva [routerLink]

video 25: Pipe (Filtros) -> se hace un ejemplo de un pipe, el cual se usa en el componente play-list-body para ordenar ascendente o descendente por unos parámetros

video 26: Directivas (Manejar elementos del DOM) -> Se crea una directiva para manejar el elemento img de HTML, para manejar una imagen por defecto en caso de que no se cargue la imagen correcta del componente. Esta directiva recibe como input, la url del recurso a usar (Una imagen por defecto) y tiene  un HostListener, para escuchar errores de parte del componente img, en caso de haber un error , este lo captura y utiliza la url pasada para colocar la imagen y así no dejar que se vea sin fondo el card.

video 27: Formulario login - Formularios reactivos: En este video, el objetivo fue comunicar el card player que se tiene en el panel, y comunicarlo con el media player, para esto la idea es que al presionar el botón de play, la canción sea enviada al media player para que lo reproduzca. Esto se hizo usando programación reactiva, para comunicar los componentes, por lo que se ven los conceptos de EventEmitter, subscribe and unsubscribe , emit , onDestroy. para cumplir con el flujo 


video 28: Servicios -> se crean servicios dentro del modulo Tracks y este se usa allí y en el side bar, se muestra mediante programación reactiva como crear un observer y subscribirse a el y además indtroducirle un dato nuevo que aparece luego de 4 segundos, en este se uso Observer,of()  y el conecpto next que tiene un objeto tipo observer.

video 29. Se sigue el ejercicio complementando al video 28

----//////#### SECCION 7 : HTTPClient, API y mÁS   ######////////////// ------------

video 30. API Node(Demo)  - Angular HTTP CLIENT -> Se baja una api que contiene los tracks,  y se usara en la demo, se configura y se modifica el servicio de tracks para traer la info de la api con http client de la librería @angular/common/http

video 31: HTTP Conexión -> Se configura el servicio con el httpclient nuevamente y ahora se explica el uso de PIPE (Filtro) PERO este filtro no es el de angular, este filtro es el que se le puede aplicar a las subscripciones y hacen parte de la programación reactiva, se explica el uso de estos pipes y como nos ayudan , además de que se hace un ejemplo donde se usa una promesa para usarla dentro de un pipe en la petición http.

Video 32: Se modifica el tracks-page-component.ts para mostrar lo siguiente: el observable también se puede funcionar como una promesa, puese llamarse usando el método async con await en modo topromise. 
Para manejar errores se muestra el uso de catchError e RxJS, para usarlo preferiblemente en el pipe de la petición y no en el subscriibe del observable.
Se explica el manejo del catch error , y su importancia.

----//////#### SECCION 8 : Proteger rutas con sesión de usuario.  ######////////////// ------------
Video 33: Post Login y Cookie: Se implementa en el auth.services.ts el uso de un post para enviar las credenciales de usuario.
además se configuro y mostro el ejemplod de uso del token de sesion, tanto del lado del servicio como del lado del componente.
 
Video 34: Guards - Vigilantes de las rutas -> ng generate guard ruta/nombre_guard  : Se le coloco un guardian a la ruta principal del homecomponent, estos guardianes
se pueden usar para permitir el acceso a la ruta, en el ejemplo se validaba el usode token de sesion para permitir el paso, además de redirigir a otra ruta en caso de no tener el token

Video 35:  Interceptores -> Inyectar propiedades directamente en las peticiones  , comando para generar un inyector: ng generate interceptor core/interceptors/InjectSession
Se muestra un ejemplo de agregar un header con autorizathion token , pero si esto se hace manual por cada peticion que existe todo se vuelve un bololo, por ende nace
la necesidad de usar inyectores, para manejarlo. En pocas palabras, toma un request y me permite meterle más info adicional, sin necesidad de escribir el codigo en el lugar del llamado